// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.3
// source: addressbook.proto

package codegen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FetchAddress_GetAddress_FullMethodName = "/proto_test.FetchAddress/GetAddress"
)

// FetchAddressClient is the client API for FetchAddress service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FetchAddressClient interface {
	GetAddress(ctx context.Context, in *AddressRequest, opts ...grpc.CallOption) (*AddressBook, error)
}

type fetchAddressClient struct {
	cc grpc.ClientConnInterface
}

func NewFetchAddressClient(cc grpc.ClientConnInterface) FetchAddressClient {
	return &fetchAddressClient{cc}
}

func (c *fetchAddressClient) GetAddress(ctx context.Context, in *AddressRequest, opts ...grpc.CallOption) (*AddressBook, error) {
	out := new(AddressBook)
	err := c.cc.Invoke(ctx, FetchAddress_GetAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FetchAddressServer is the server API for FetchAddress service.
// All implementations must embed UnimplementedFetchAddressServer
// for forward compatibility
type FetchAddressServer interface {
	GetAddress(context.Context, *AddressRequest) (*AddressBook, error)
	mustEmbedUnimplementedFetchAddressServer()
}

// UnimplementedFetchAddressServer must be embedded to have forward compatible implementations.
type UnimplementedFetchAddressServer struct {
}

func (UnimplementedFetchAddressServer) GetAddress(context.Context, *AddressRequest) (*AddressBook, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddress not implemented")
}
func (UnimplementedFetchAddressServer) mustEmbedUnimplementedFetchAddressServer() {}

// UnsafeFetchAddressServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FetchAddressServer will
// result in compilation errors.
type UnsafeFetchAddressServer interface {
	mustEmbedUnimplementedFetchAddressServer()
}

func RegisterFetchAddressServer(s grpc.ServiceRegistrar, srv FetchAddressServer) {
	s.RegisterService(&FetchAddress_ServiceDesc, srv)
}

func _FetchAddress_GetAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FetchAddressServer).GetAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FetchAddress_GetAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FetchAddressServer).GetAddress(ctx, req.(*AddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FetchAddress_ServiceDesc is the grpc.ServiceDesc for FetchAddress service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FetchAddress_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto_test.FetchAddress",
	HandlerType: (*FetchAddressServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAddress",
			Handler:    _FetchAddress_GetAddress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "addressbook.proto",
}
