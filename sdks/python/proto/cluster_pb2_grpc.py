# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import addons_pb2 as addons__pb2
import cluster_pb2 as cluster__pb2
import cluster_provider_pb2 as cluster__provider__pb2
import resource_provider_pb2 as resource__provider__pb2
import team_pb2 as team__pb2


class ClusterServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateCluster = channel.unary_unary(
                '/proto.ClusterService/CreateCluster',
                request_serializer=cluster__pb2.CreateClusterRequest.SerializeToString,
                response_deserializer=cluster__pb2.APIResponse.FromString,
                )
        self.AddTeams = channel.unary_unary(
                '/proto.ClusterService/AddTeams',
                request_serializer=team__pb2.AddTeamsRequest.SerializeToString,
                response_deserializer=cluster__pb2.APIResponse.FromString,
                )
        self.AddClusterProvider = channel.unary_unary(
                '/proto.ClusterService/AddClusterProvider',
                request_serializer=cluster__provider__pb2.AddClusterProviderRequest.SerializeToString,
                response_deserializer=cluster__pb2.APIResponse.FromString,
                )
        self.AddResourceProvider = channel.unary_unary(
                '/proto.ClusterService/AddResourceProvider',
                request_serializer=resource__provider__pb2.AddResourceProviderRequest.SerializeToString,
                response_deserializer=cluster__pb2.APIResponse.FromString,
                )
        self.AddAddons = channel.unary_unary(
                '/proto.ClusterService/AddAddons',
                request_serializer=addons__pb2.AddAddonsRequest.SerializeToString,
                response_deserializer=cluster__pb2.APIResponse.FromString,
                )
        self.BuildCluster = channel.unary_unary(
                '/proto.ClusterService/BuildCluster',
                request_serializer=cluster__pb2.BuildClusterRequest.SerializeToString,
                response_deserializer=cluster__pb2.APIResponse.FromString,
                )


class ClusterServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateCluster(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddTeams(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddClusterProvider(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddResourceProvider(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddAddons(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BuildCluster(self, request, context):
        """rpc SendCluster (EksBlueprint) returns (EksBlueprintResponse);
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ClusterServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateCluster': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateCluster,
                    request_deserializer=cluster__pb2.CreateClusterRequest.FromString,
                    response_serializer=cluster__pb2.APIResponse.SerializeToString,
            ),
            'AddTeams': grpc.unary_unary_rpc_method_handler(
                    servicer.AddTeams,
                    request_deserializer=team__pb2.AddTeamsRequest.FromString,
                    response_serializer=cluster__pb2.APIResponse.SerializeToString,
            ),
            'AddClusterProvider': grpc.unary_unary_rpc_method_handler(
                    servicer.AddClusterProvider,
                    request_deserializer=cluster__provider__pb2.AddClusterProviderRequest.FromString,
                    response_serializer=cluster__pb2.APIResponse.SerializeToString,
            ),
            'AddResourceProvider': grpc.unary_unary_rpc_method_handler(
                    servicer.AddResourceProvider,
                    request_deserializer=resource__provider__pb2.AddResourceProviderRequest.FromString,
                    response_serializer=cluster__pb2.APIResponse.SerializeToString,
            ),
            'AddAddons': grpc.unary_unary_rpc_method_handler(
                    servicer.AddAddons,
                    request_deserializer=addons__pb2.AddAddonsRequest.FromString,
                    response_serializer=cluster__pb2.APIResponse.SerializeToString,
            ),
            'BuildCluster': grpc.unary_unary_rpc_method_handler(
                    servicer.BuildCluster,
                    request_deserializer=cluster__pb2.BuildClusterRequest.FromString,
                    response_serializer=cluster__pb2.APIResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'proto.ClusterService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ClusterService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateCluster(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proto.ClusterService/CreateCluster',
            cluster__pb2.CreateClusterRequest.SerializeToString,
            cluster__pb2.APIResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddTeams(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proto.ClusterService/AddTeams',
            team__pb2.AddTeamsRequest.SerializeToString,
            cluster__pb2.APIResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddClusterProvider(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proto.ClusterService/AddClusterProvider',
            cluster__provider__pb2.AddClusterProviderRequest.SerializeToString,
            cluster__pb2.APIResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddResourceProvider(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proto.ClusterService/AddResourceProvider',
            resource__provider__pb2.AddResourceProviderRequest.SerializeToString,
            cluster__pb2.APIResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddAddons(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proto.ClusterService/AddAddons',
            addons__pb2.AddAddonsRequest.SerializeToString,
            cluster__pb2.APIResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BuildCluster(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proto.ClusterService/BuildCluster',
            cluster__pb2.BuildClusterRequest.SerializeToString,
            cluster__pb2.APIResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
